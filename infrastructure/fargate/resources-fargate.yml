Resources:
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ecs-task-execution-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${self:provider.stage}-koop:*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${self:provider.stage}/rds/postgis-secret"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${self:provider.stage}/rds/postgis-secret-*"

  TaskRole:
    Type: AWS::IAM::Role
    DependsOn: 
      - TerriamapSharingBucket
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ecs-task-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetObject"
                  - "s3:GetObjectAcl"
                  - "s3:ListBucket"
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref TerriamapSharingBucket
                    - "/*"

  TerriamapTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: 
      - TaskExecutionRole
      - TaskRole
    Properties:
      Family: !Sub "${self:provider.stage}-terriamap-task"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"  # 0.25 vCPU
      Memory: "512"  # 0.5 GB
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: ${self:provider.stage}-terriamap-container
          Image: 273354623129.dkr.ecr.us-east-1.amazonaws.com/sit-terriamap
          PortMappings:
            - ContainerPort: 3001
          Essential: true
          
  TerriamapFargateService:
    Type: AWS::ECS::Service
    DependsOn: 
      - TerriamapTaskDefinition
    Properties:
      Cluster: !ImportValue  ${self:provider.stage}-ECSClusterName
      ServiceName: !Sub "${self:provider.stage}-terriamap-service"
      TaskDefinition: !Ref TerriamapTaskDefinition
      DesiredCount: ${self:custom.environment.TERRIAMAP_DESIRED_COUNT}
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: ${self:provider.stage}-PublicSubnet1
            - Fn::ImportValue: ${self:provider.stage}-PublicSubnet2
          SecurityGroups:
            - !ImportValue ${self:provider.stage}-FargateSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - TargetGroupArn: !ImportValue ${self:provider.stage}-TargetGroupTerriamapARN
          ContainerName: !Sub "${self:provider.stage}-terriamap-container"
          ContainerPort: ${self:custom.environment.TERRIAMAP_CONTAINER_PORT}

  # Log Group
  KoopLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${self:provider.stage}-koop"
      RetentionInDays: 1
    
  # Task Definition
  KoopTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: 
      - KoopLogGroup
      - TaskExecutionRole
      - TaskRole
    Properties:
      Family: !Sub "${self:provider.stage}-koop-task"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256" # 0.25 vCPU
      Memory: "512" # 512 MB
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: koop
          Image: ${self:custom.environment.KOOP_ECR_URL}
          PortMappings:
            - ContainerPort: ${self:custom.environment.KOOP_CONTAINER_PORT}
              Protocol: tcp
          Essential: true
          Environment:
            - Name: PORT
              Value: ${self:custom.environment.KOOP_CONTAINER_PORT}
            - Name: PG_HOST
              Value: !ImportValue ${self:provider.stage}-PostgresEndpoint 
            - Name: PG_PORT
              Value: "5432"
            - Name: PG_DATABASE
              Value: koop
            - Name: PG_OBJECTID
              Value: gid
            - Name: PG_LIMIT
              Value: "1000"
            - Name: PG_USER
              Value: '{{resolve:secretsmanager:${self:provider.stage}/rds/postgis-secret:SecretString:username}}'
            - Name: PG_PASSWORD
              Value: '{{resolve:secretsmanager:${self:provider.stage}/rds/postgis-secret:SecretString:password}}'
            - Name: PG_SSL
              Value: "true"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KoopLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: koop

  # Fargate Service
  KoopService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue  ${self:provider.stage}-ECSClusterName
      ServiceName: !Sub "${self:provider.stage}-koop-service"
      TaskDefinition: !Ref KoopTaskDefinition
      DesiredCount: ${self:custom.environment.KOOP_DESIRED_COUNT}
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: ${self:provider.stage}-PublicSubnet1
            - Fn::ImportValue: ${self:provider.stage}-PublicSubnet2
          SecurityGroups:
            - !ImportValue ${self:provider.stage}-FargateSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - TargetGroupArn: !ImportValue ${self:provider.stage}-TargetGroupKoopARN
          ContainerName: koop
          ContainerPort: ${self:custom.environment.KOOP_CONTAINER_PORT}
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/pgtileserv
      RetentionInDays: 1
      Tags:
        - Key: Name
          Value: !Sub "${self:provider.stage}-pgtileserv-log-group"
          
  # ECS Task Definition
  PGTileserviceDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: pgtileserv-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256" # 0.25 vCPU
      Memory: "512" # 512 MB
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: pgtileserv
          Image: pramsey/pg_tileserv:latest
          PortMappings:
            - ContainerPort: ${self:custom.environment.PGTILESERVICE_CONTAINER_PORT}
              HostPort: ${self:custom.environment.PGTILESERVICE_CONTAINER_PORT}
          Environment:
          - Name: DATABASE_URL
            Value: !Sub
              - 'postgres://${DBUsername}:${DBPassword}@${DBHost}:5432/koop'
              - DBUsername: '{{resolve:secretsmanager:${self:provider.stage}/rds/postgis-secret:SecretString:username}}'
                DBPassword: '{{resolve:secretsmanager:${self:provider.stage}/rds/postgis-secret:SecretString:password}}'
                DBHost: !ImportValue ${self:provider.stage}-PostgresEndpoint
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: pgtileserv
  # ECS Service
  PGTileService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue  ${self:provider.stage}-ECSClusterName
      DesiredCount: ${self:custom.environment.PGTILESERVICE_DESIRED_COUNT}
      LaunchType: FARGATE
      TaskDefinition: !Ref PGTileserviceDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - Fn::ImportValue: ${self:provider.stage}-PublicSubnet1
            - Fn::ImportValue: ${self:provider.stage}-PublicSubnet2
          SecurityGroups:
            - !ImportValue ${self:provider.stage}-FargateSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: pgtileserv
          ContainerPort: ${self:custom.environment.PGTILESERVICE_CONTAINER_PORT}
          TargetGroupArn: !ImportValue ${self:provider.stage}-TargetGroupPGTileserveARN
