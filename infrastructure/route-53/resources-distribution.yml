

Resources:
  OAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access to S3 bucket

  LambdaEdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler  # Update the handler to match the inline code
      Runtime: nodejs20.x
      Role: !GetAtt LambdaEdgeRole.Arn
      Code:
        ZipFile: |
          'use strict';
          exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;
            const uri = request.uri;
            const spaRoutes = ['/', '/portfolio'];
            const assetRegex = /\.(js|css|png|jpg|jpeg|gif|ico|html|woff|woff2|ttf|eot|svg)$/;
            if (spaRoutes.includes(uri) && !assetRegex.test(uri)) {
              request.uri = '/index.html';
            }
            callback(null, request);
          };

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaEdgePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LambdaEdgeVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaEdgeFunction

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${self:provider.stage}-mapkraken-bucket.s3.amazonaws.com"
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OAI}"
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !If [OnlyCreateResourceInPRD, "${self:custom.environment.DOMAIN_NAME}", !Sub "${self:provider.stage}.${self:custom.environment.DOMAIN_NAME}"]
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: ["GET", "HEAD"]
          CachedMethods: ["GET", "HEAD"]
          ForwardedValues:
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref LambdaEdgeVersion
        ViewerCertificate:
          AcmCertificateArn: !ImportValue ${self:provider.stage}-CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Comment: ${self:custom.environment.DISTRIBUTION_COMMENT}
        
  CloudFrontDistributionLabs:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${self:provider.stage}-labs-mapkraken-bucket.s3.amazonaws.com"
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OAI}"
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !If [OnlyCreateResourceInPRD, !Sub "labs.${self:custom.environment.DOMAIN_NAME}", !Sub "${self:provider.stage}-labs.${self:custom.environment.DOMAIN_NAME}"]
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: ["GET", "HEAD"]
          CachedMethods: ["GET", "HEAD"]
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          AcmCertificateArn: !ImportValue ${self:provider.stage}-CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Comment: ${self:custom.environment.DISTRIBUTION_COMMENT_LABS}

  CloudFrontDistributionTerriamap:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: ALBOrigin
            DomainName: !ImportValue ${self:provider.stage}-ALBDNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only  # Use 'match-viewer' if ALB uses HTTPS
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: allow-all  # Change to 'redirect-to-https' if using SSL
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - '*'
          Compress: true
          DefaultTTL: 86400  # 24 hours
          MinTTL: 0
          MaxTTL: 31536000  # 1 year
        Aliases:
          - !If [OnlyCreateResourceInPRD, !Sub "terriamap.${self:custom.environment.DOMAIN_NAME}", !Sub "${self:provider.stage}-terriamap.${self:custom.environment.DOMAIN_NAME}"]
        ViewerCertificate:
          AcmCertificateArn: !ImportValue ${self:provider.stage}-CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        HttpVersion: http2

        Comment: ${self:custom.environment.DISTRIBUTION_COMMENT_TERRIAMAP}

  CloudFrontDistributionKoop:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: ALBOrigin
            DomainName: !ImportValue ${self:provider.stage}-ALBDNSName
            CustomOriginConfig:
              HTTPPort: 9000
              HTTPSPort: 443
              OriginProtocolPolicy: http-only  # Use 'match-viewer' if ALB uses HTTPS
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: allow-all  # Change to 'redirect-to-https' if using SSL
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - '*'
          Compress: true
          DefaultTTL: 86400  # 24 hours
          MinTTL: 0
          MaxTTL: 31536000  # 1 year
        Aliases:
          - !If [OnlyCreateResourceInPRD, !Sub "koop.${self:custom.environment.DOMAIN_NAME}", !Sub "${self:provider.stage}-koop.${self:custom.environment.DOMAIN_NAME}"]
        ViewerCertificate:
          AcmCertificateArn: !ImportValue ${self:provider.stage}-CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        HttpVersion: http2
        Comment: ${self:custom.environment.DISTRIBUTION_COMMENT_TERRIAMAP}
# CloudFront Distribution for API
  # TODO - fuind out if this can be combined with the other distribution. 
  CloudFrontDistributionPortfolioApi:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: ApiOrigin
            DomainName:
              Fn::Sub:
                - "${PortfolioApiId}.execute-api.${AWS::Region}.amazonaws.com"
                - PortfolioApiId: !ImportValue ${self:provider.stage}-PortfolioApiId
            OriginPath: !Sub "/${self:provider.stage}"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: ApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 3600  # Cache for 1 hour, adjust as needed
          MinTTL: 0
          MaxTTL: 86400  # 1 day
        Aliases:
          - !If [OnlyCreateResourceInPRD, !Sub "api.${self:custom.environment.DOMAIN_NAME}", !Sub "${self:provider.stage}-api.${self:custom.environment.DOMAIN_NAME}"]
        ViewerCertificate:
          AcmCertificateArn: !ImportValue ${self:provider.stage}-CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        HttpVersion: http2
        Comment: "${self:provider.stage} Portfolio API Distribution"

  # Route 53 Record for API
  PortfolioApiARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue HostedZoneId
      Name: !If [OnlyCreateResourceInPRD, "api.${self:custom.environment.DOMAIN_NAME}.", "${self:provider.stage}-api.${self:custom.environment.DOMAIN_NAME}."]
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistributionPortfolioApi.DomainName
  WebsiteARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue HostedZoneId
      Name: !If [OnlyCreateResourceInPRD, "${self:custom.environment.DOMAIN_NAME}.", "${self:provider.stage}.${self:custom.environment.DOMAIN_NAME}."]
      Type: "A"
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistribution.DomainName
  
  WebsiteARecordLabs:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue HostedZoneId
      Name: !If [OnlyCreateResourceInPRD, "labs.${self:custom.environment.DOMAIN_NAME}.", "${self:provider.stage}-labs.${self:custom.environment.DOMAIN_NAME}."]
      Type: "A"
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistribution.DomainName
  
  WebsiteARecordTerriamap:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue HostedZoneId
      Name: !If [OnlyCreateResourceInPRD, "terriamap.${self:custom.environment.DOMAIN_NAME}.", "${self:provider.stage}-terriamap.${self:custom.environment.DOMAIN_NAME}."]
      Type: "A"
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistribution.DomainName
  WebsiteARecordKoop:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue HostedZoneId
      Name: !If [OnlyCreateResourceInPRD, "koop.${self:custom.environment.DOMAIN_NAME}.", "${self:provider.stage}-koop.${self:custom.environment.DOMAIN_NAME}."]
      Type: "A"
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistribution.DomainName
Outputs:
  CloudFrontDistributionId:
    Description: "The ID of the CloudFront distribution"
    Value: !Ref CloudFrontDistribution