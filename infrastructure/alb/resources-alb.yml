Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      VpcId: 
        Fn::ImportValue: "${self:provider.stage}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 9000 # koop
          ToPort: 9000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${self:provider.stage}-${self:custom.namespace}-alb-sg"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${self:provider.stage}-${self:custom.namespace}-alb"
      Subnets:
        - !ImportValue ${self:provider.stage}-PublicSubnet1
        - !ImportValue ${self:provider.stage}-PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: !Sub "${self:provider.stage}-${self:custom.namespace}-alb"

  TargetGroupTerriamap:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${self:provider.stage}-fargate-tg"
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      VpcId: 
        Fn::ImportValue: "${self:provider.stage}-VPC"
      Tags:
        - Key: Name
          Value: !Sub "${self:provider.stage}-fargate-tg"
        - Key: Stage
          Value: !Ref "AWS::StackName"

  TargetGroupKoop:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${self:provider.stage}-koop-tg"
      VpcId: !ImportValue ${self:provider.stage}-VPC
      Port: 9000
      Protocol: HTTP
      TargetType: ip # Fargate uses 'ip' for awsvpc networking
      HealthCheckPath: "/" # Adjust if Koop has a specific health endpoint
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      Tags:
        - Key: Name
          Value: !Sub "${self:provider.stage}-koop-tg"

  TargetGroupPGTileserve:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${self:provider.stage}-pgtileserve-tg"
      Port: 7800
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue ${self:provider.stage}-VPC
      HealthCheckPath: "/health"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      Tags:
        - Key: Name
          Value: !Sub "${self:provider.stage}-pgtileserve-tg"

  ListenerHTTPTerriamap:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroupTerriamap
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupTerriamap
      LoadBalancerArn: !Ref ApplicationLoadBalancer

  # Listener for Koop
  KoopListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 9000
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupKoop

    # Listener for Koop
  PGTileserveListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 7800
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupPGTileserve

  ListenerHTTPSTerriamap:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroupTerriamap
    Properties:
      Port: 443
      Protocol: HTTPS
      SslPoliucy: ELBSecurityPolicy-TLS-1-2-2017-01
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupTerriamap
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Certificates:
        - CertificateArn: !ImportValue ${self:provider.stage}-CertificateArn

Outputs:
  ALBDNSName:
    Description: "DNS name of the Application Load Balancer"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${self:provider.stage}-ALBDNSName"
  TargetGroupKoopARN:
    Description: "ARN of the Koop target group"
    Value: !Ref TargetGroupKoop
    Export:
      Name: !Sub "${self:provider.stage}-TargetGroupKoopARN"
  TargetGroupTerriamapARN:
    Description: "ARN of the Terriamap target group"
    Value: !Ref TargetGroupTerriamap
    Export:
      Name: !Sub "${self:provider.stage}-TargetGroupTerriamapARN"
  TargetGroupPGTileserveARN:
    Description: "ARN of the Koop target group"
    Value: !Ref TargetGroupPGTileserve
    Export:
      Name: !Sub "${self:provider.stage}-TargetGroupPGTileserveARN"
  TargetGroupTerriamapName:
    Description: "Name of the Terriamap target group"
    Value: !Sub "${self:provider.stage}-fargate-tg"
    Export:
      Name: !Sub "${self:provider.stage}-TargetGroupTerriamapName"
  ALBSecurityGroup:
    Description: "Security group for ALB"
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub "${self:provider.stage}-ALBSecurityGroup"
  ListenerHTTPSTerriamapArn:
    Description: "HTTPS listener for Terriamap"
    Value: !Ref ListenerHTTPSTerriamap
    Export:
      Name: !Sub "${self:provider.stage}-ListenerHTTPSTerriamapArn"